// ================================
// MANEJADOR DE BARRA DE CARGA PARA P√ÅGINAS EXTERNAS
// ================================

/**
 * Script que debe incluirse en todas las p√°ginas externas
 * para ocultar autom√°ticamente la barra de carga cuando la p√°gina termine de cargar
 */

// Funci√≥n para ocultar la barra de carga desde p√°ginas externas
function hideExternalLoadingBar() {
    try {
        // Intentar acceder a la ventana padre (index.html)
        if (window.opener && window.opener.dashboardFunctions) {
            window.opener.dashboardFunctions.hideLoadingBar();
            console.log('‚úÖ Barra de carga ocultada desde p√°gina externa');
        } else if (parent && parent.dashboardFunctions) {
            parent.dashboardFunctions.hideLoadingBar();
            console.log('‚úÖ Barra de carga ocultada desde iframe');
        } else {
            // Si no hay ventana padre, buscar en el localStorage una se√±al
            localStorage.setItem('hideLoadingBar', Date.now().toString());
            console.log('üì° Se√±al enviada para ocultar barra de carga');
        }
    } catch (error) {
        console.warn('No se pudo ocultar la barra de carga:', error);
    }
}

// Funci√≥n para mostrar progreso de carga espec√≠fico
function updateExternalLoadingProgress(percentage, text, subtext) {
    try {
        if (window.opener && window.opener.dashboardFunctions) {
            if (percentage !== undefined) {
                window.opener.dashboardFunctions.updateLoadingProgress(percentage);
            }
            if (text || subtext) {
                window.opener.dashboardFunctions.updateLoadingText(text, subtext);
            }
        } else if (parent && parent.dashboardFunctions) {
            if (percentage !== undefined) {
                parent.dashboardFunctions.updateLoadingProgress(percentage);
            }
            if (text || subtext) {
                parent.dashboardFunctions.updateLoadingText(text, subtext);
            }
        }
    } catch (error) {
        console.warn('No se pudo actualizar el progreso de carga:', error);
    }
}

// Auto-ejecutar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ P√°gina externa cargando...');
    
    // Simular progreso de carga inicial
    updateExternalLoadingProgress(30, 'Cargando recursos...', 'Inicializando componentes');
    
    // Cuando todos los recursos est√©n cargados
    window.addEventListener('load', function() {
        console.log('‚úÖ P√°gina externa completamente cargada');
        
        // Peque√±o delay para que el usuario vea que la carga termin√≥
        setTimeout(() => {
            hideExternalLoadingBar();
        }, 500);
    });
    
    // Progreso intermedio despu√©s de que el DOM est√© listo
    setTimeout(() => {
        updateExternalLoadingProgress(70, 'Configurando interfaz...', 'Casi listo');
    }, 200);
});

// Listener para se√±ales desde localStorage (fallback)
window.addEventListener('storage', function(e) {
    if (e.key === 'showLoadingBar') {
        // Otra p√°gina est√° pidiendo mostrar la barra de carga
        console.log('üì° Se√±al recibida para mostrar barra de carga');
    }
});

// Funci√≥n de utilidad para p√°ginas que necesiten control manual
window.loadingHandler = {
    hide: hideExternalLoadingBar,
    updateProgress: updateExternalLoadingProgress,
    
    // Funci√≥n para mostrar progreso espec√≠fico de la aplicaci√≥n
    setProgress: function(percentage, text, subtext) {
        updateExternalLoadingProgress(percentage, text, subtext);
    },
    
    // Funci√≥n para completar la carga
    complete: function(text = 'Carga completada', subtext = 'Aplicaci√≥n lista') {
        updateExternalLoadingProgress(100, text, subtext);
        setTimeout(hideExternalLoadingBar, 300);
    }
};

console.log('üìã Loading Handler inicializado para p√°gina externa'); 